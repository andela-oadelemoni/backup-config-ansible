## 
- name: Install AWS CLI
  pip: name=awscli state=latest
  register: awscli_installed
  tags:
    - install

- debug: var=awscli_installed
  tags:
    - install

- name: Create .aws dir under home directory for awscli config 
  file:  
    path={{ ansible_env.HOME }}/.aws
    state=directory
    owner={{ ansible_env.USER }}
    mode=0755
  when: awscli_installed|success
  tags:
    - install

- name: Copy awscli config using templates
  template: 
    src={{item}}.j2
    dest={{ ansible_env.HOME}}/.aws/{{item}} 
    owner={{ ansible_env.USER }}
    mode=0644
  with_items:
    - config
    - credentials
  when: awscli_installed|success
  tags:
    - install

- name: Create S3 bucket
  s3_bucket: 
    name: "{{ s3_bucket_name }}"
  tags:
    - create-bucket

- name: Check if new bucket exists
  command: bash -c "aws s3 ls {{ s3_bucket_name }}"
  register: check_bucket
  ignore_errors: True
  tags:
    - confirm-bucket

- fail: msg="The creation of {{ s3_bucket_name }} was not successful"
  when: check_bucket|failed
  tags:
    - confirm-bucket

- name: Archive backup directory
  command: bash -c "tar -zcvf backup.tar.gz {{ backup_directory }}"
  args:
    chdir: "{{ ansible_env.HOME }}"
  tags:
    - upload

- name: Upload backup archive to AWS S3
  command: bash -c "aws s3 mv {{ ansible_env.HOME }}/backup.tar.gz s3://{{ s3_bucket_name }}"
  tags:
    - upload

## Automate backup process with cron 
- name: Copy cron file to /etc/cron.d directory
  template: src=aws_s3_cron.j2 dest=/etc/cron.d/aws_s3_cron owner=root
  tags:
    - cron-setup

- name: Check that rsnapshot cron exists
  command: bash -c "cat /etc/cron.d/aws_s3_cron | grep rsnapshot"
  register: bucket_cron
  ignore_errors: True
  tags:
    - cron-check

- name: Throw error if cron does not exist
  fail: msg="rsnapshot cron does not seem to exist"
  when: bucket_cron|failed
  tags:
    - cron-check

